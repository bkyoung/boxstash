// THIS FILE IS AUTO GENERATED BY GK-CLI DO NOT EDIT!!
package endpoint

import (
	service "boxstash/internal/service"
	endpoint "github.com/go-kit/kit/endpoint"
)

// Endpoints collects all of the endpoints that compose a profile service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type Endpoints struct {
	AboutEndpoint             endpoint.Endpoint
	NewAuthTokenEndpoint      endpoint.Endpoint
	ValidateAuthTokenEndpoint endpoint.Endpoint
	DeleteAuthTokenEndpoint   endpoint.Endpoint
	ReadOrganizationEndpoint  endpoint.Endpoint
	SearchEndpoint            endpoint.Endpoint
	ReadBoxEndpoint           endpoint.Endpoint
	CreateBoxEndpoint         endpoint.Endpoint
	UpdateBoxEndpoint         endpoint.Endpoint
	DeleteBoxEndpoint         endpoint.Endpoint
	ReadVersionEndpoint       endpoint.Endpoint
	CreateVersionEndpoint     endpoint.Endpoint
	UpdateVersionEndpoint     endpoint.Endpoint
	DeleteVersionEndpoint     endpoint.Endpoint
	ReleaseVersionEndpoint    endpoint.Endpoint
	RevokeVersionEndpoint     endpoint.Endpoint
	ReadProviderEndpoint      endpoint.Endpoint
	CreateProviderEndpoint    endpoint.Endpoint
	UpdateProviderEndpoint    endpoint.Endpoint
	DeleteProviderEndpoint    endpoint.Endpoint
}

// New returns a Endpoints struct that wraps the provided service, and wires in all of the
// expected endpoint middlewares
func New(s service.BoxstashService, mdw map[string][]endpoint.Middleware) Endpoints {
	eps := Endpoints{
		AboutEndpoint:             MakeAboutEndpoint(s),
		CreateBoxEndpoint:         MakeCreateBoxEndpoint(s),
		CreateProviderEndpoint:    MakeCreateProviderEndpoint(s),
		CreateVersionEndpoint:     MakeCreateVersionEndpoint(s),
		DeleteAuthTokenEndpoint:   MakeDeleteAuthTokenEndpoint(s),
		DeleteBoxEndpoint:         MakeDeleteBoxEndpoint(s),
		DeleteProviderEndpoint:    MakeDeleteProviderEndpoint(s),
		DeleteVersionEndpoint:     MakeDeleteVersionEndpoint(s),
		NewAuthTokenEndpoint:      MakeNewAuthTokenEndpoint(s),
		ReadBoxEndpoint:           MakeReadBoxEndpoint(s),
		ReadOrganizationEndpoint:  MakeReadOrganizationEndpoint(s),
		ReadProviderEndpoint:      MakeReadProviderEndpoint(s),
		ReadVersionEndpoint:       MakeReadVersionEndpoint(s),
		ReleaseVersionEndpoint:    MakeReleaseVersionEndpoint(s),
		RevokeVersionEndpoint:     MakeRevokeVersionEndpoint(s),
		SearchEndpoint:            MakeSearchEndpoint(s),
		UpdateBoxEndpoint:         MakeUpdateBoxEndpoint(s),
		UpdateProviderEndpoint:    MakeUpdateProviderEndpoint(s),
		UpdateVersionEndpoint:     MakeUpdateVersionEndpoint(s),
		ValidateAuthTokenEndpoint: MakeValidateAuthTokenEndpoint(s),
	}
	for _, m := range mdw["About"] {
		eps.AboutEndpoint = m(eps.AboutEndpoint)
	}
	for _, m := range mdw["NewAuthToken"] {
		eps.NewAuthTokenEndpoint = m(eps.NewAuthTokenEndpoint)
	}
	for _, m := range mdw["ValidateAuthToken"] {
		eps.ValidateAuthTokenEndpoint = m(eps.ValidateAuthTokenEndpoint)
	}
	for _, m := range mdw["DeleteAuthToken"] {
		eps.DeleteAuthTokenEndpoint = m(eps.DeleteAuthTokenEndpoint)
	}
	for _, m := range mdw["ReadOrganization"] {
		eps.ReadOrganizationEndpoint = m(eps.ReadOrganizationEndpoint)
	}
	for _, m := range mdw["Search"] {
		eps.SearchEndpoint = m(eps.SearchEndpoint)
	}
	for _, m := range mdw["ReadBox"] {
		eps.ReadBoxEndpoint = m(eps.ReadBoxEndpoint)
	}
	for _, m := range mdw["CreateBox"] {
		eps.CreateBoxEndpoint = m(eps.CreateBoxEndpoint)
	}
	for _, m := range mdw["UpdateBox"] {
		eps.UpdateBoxEndpoint = m(eps.UpdateBoxEndpoint)
	}
	for _, m := range mdw["DeleteBox"] {
		eps.DeleteBoxEndpoint = m(eps.DeleteBoxEndpoint)
	}
	for _, m := range mdw["ReadVersion"] {
		eps.ReadVersionEndpoint = m(eps.ReadVersionEndpoint)
	}
	for _, m := range mdw["CreateVersion"] {
		eps.CreateVersionEndpoint = m(eps.CreateVersionEndpoint)
	}
	for _, m := range mdw["UpdateVersion"] {
		eps.UpdateVersionEndpoint = m(eps.UpdateVersionEndpoint)
	}
	for _, m := range mdw["DeleteVersion"] {
		eps.DeleteVersionEndpoint = m(eps.DeleteVersionEndpoint)
	}
	for _, m := range mdw["ReleaseVersion"] {
		eps.ReleaseVersionEndpoint = m(eps.ReleaseVersionEndpoint)
	}
	for _, m := range mdw["RevokeVersion"] {
		eps.RevokeVersionEndpoint = m(eps.RevokeVersionEndpoint)
	}
	for _, m := range mdw["ReadProvider"] {
		eps.ReadProviderEndpoint = m(eps.ReadProviderEndpoint)
	}
	for _, m := range mdw["CreateProvider"] {
		eps.CreateProviderEndpoint = m(eps.CreateProviderEndpoint)
	}
	for _, m := range mdw["UpdateProvider"] {
		eps.UpdateProviderEndpoint = m(eps.UpdateProviderEndpoint)
	}
	for _, m := range mdw["DeleteProvider"] {
		eps.DeleteProviderEndpoint = m(eps.DeleteProviderEndpoint)
	}
	return eps
}
