// THIS FILE IS AUTO GENERATED BY GK-CLI DO NOT EDIT!!
package service

import (
	endpoint "boxstash/internal/endpoint"
	http1 "boxstash/internal/http"
	endpoint1 "github.com/go-kit/kit/endpoint"
	log "github.com/go-kit/kit/log"
	opentracing "github.com/go-kit/kit/tracing/opentracing"
	http "github.com/go-kit/kit/transport/http"
	group "github.com/oklog/oklog/pkg/group"
	opentracinggo "github.com/opentracing/opentracing-go"
)

func createService(endpoints endpoint.Endpoints) (g *group.Group) {
	g = &group.Group{}
	initHttpHandler(endpoints, g)
	return g
}
func defaultHttpOptions(logger log.Logger, tracer opentracinggo.Tracer) map[string][]http.ServerOption {
	options := map[string][]http.ServerOption{
		"About":             {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "About", logger))},
		"CreateBox":         {http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "CreateBox", logger))},
		"CreateProvider":    {http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "CreateProvider", logger))},
		"CreateVersion":     {http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "CreateVersion", logger))},
		"DeleteAuthToken":   {http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "DeleteAuthToken", logger))},
		"DeleteBox":         {http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "DeleteBox", logger))},
		"DeleteProvider":    {http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "DeleteProvider", logger))},
		"DeleteVersion":     {http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "DeleteVersion", logger))},
		"NewAuthToken":      {http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "NewAuthToken", logger))},
		"ReadBox":           {http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "ReadBox", logger))},
		"ReadOrganization":  {http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "ReadOrganization", logger))},
		"ReadProvider":      {http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "ReadProvider", logger))},
		"ReadVersion":       {http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "ReadVersion", logger))},
		"ReleaseVersion":    {http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "ReleaseVersion", logger))},
		"RevokeVersion":     {http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "RevokeVersion", logger))},
		"Search":            {http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "Search", logger))},
		"UpdateBox":         {http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "UpdateBox", logger))},
		"UpdateProvider":    {http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "UpdateProvider", logger))},
		"UpdateVersion":     {http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "UpdateVersion", logger))},
		"ValidateAuthToken": {http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "ValidateAuthToken", logger))},
	}
	return options
}
func addEndpointMiddlewareToAllMethods(mw map[string][]endpoint1.Middleware, m endpoint1.Middleware) {
	methods := []string{"About", "NewAuthToken", "ValidateAuthToken", "DeleteAuthToken", "ReadOrganization", "Search", "ReadBox", "CreateBox", "UpdateBox", "DeleteBox", "ReadVersion", "CreateVersion", "UpdateVersion", "DeleteVersion", "ReleaseVersion", "RevokeVersion", "ReadProvider", "CreateProvider", "UpdateProvider", "DeleteProvider"}
	for _, v := range methods {
		mw[v] = append(mw[v], m)
	}
}
